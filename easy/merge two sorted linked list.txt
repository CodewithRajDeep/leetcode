merge two sorted linked list 

Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]


Example 2:


Input: list1 = [], list2 = []
Output: []


Example 3:

Input: list1 = [], list2 = [0]
Output: [0]

suppose we have given the inputs as list1= [ 1,2,3,4] , list2= [1,4,5] 

then it output must be result= [1,1,2,3,4,4,5] 

merging is like 1-> 1 -> 1 -> 2-> 3-> 4-> 4-> 5 
as its not mentioned whether the number is in ascending order or descending, m considering the default case- ascending order and also after 50 i asumme it will be null, and we must return new node after each searching 

constraint given , range is between 0 and 50 

so i<m for every case, m= range 

linked list is already sorted so all the nodes, m assuming that number will be already arranged in ascending like 1,2,3, and so on. 


0,1,1,1,50,60 


2,4,8,10,100    



classs  


class extend - return header 


class - temp  

list value = k 

temp -> k
k-> range 
m -> temp

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both list1 and list2 are sorted in non-decreasing order.



public class Solution{
	int key;
	ListNode next;

	public Node(int key) {
		this.key = key;
		this.next = null;
	} 
     ListNode(int key) 
     { this.val = val; 
  this.val = val; this.next = next; }
 


		return new Node(key);
	}


	public static void main(String arg[]) {
	    
         Node n = new node(); 
         List  m  = new ArrayList();
		while (n != null) { 

			m.add(key);
			key = key.next;
		} 

		Result.sort(m);
		Node result = new Node(-1);
		Node temp = result;
		for (int i = 0; i < m.size(); i++) {
			result.next = new Node(m.get(i));
			result = result.next;
		}

		temp = temp.next;
		System.out.print("Resultant Merge Linked List is : ");
		while (temp != null) {
			System.out.print(temp.key + " ");
			temp = temp.next;
		}
	}

